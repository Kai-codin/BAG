"use strict";
/** Rail Announcements Generator. By Roy Curtis, MIT license, 2018 */
exports.__esModule = true;
var voxEditor_1 = require("./voxEditor");
/** Generates a bank of IDs and captions from a given phraseset document and data */
var Captioner = /** @class */ (function () {
    function Captioner() {
        /** Reference to the generated phrase caption bank */
        this.captionBank = {};
        this.populateLetters();
        this.populateNumbers();
        this.populateExcuses();
        this.populatePhrasesets();
        this.populateNames();
        this.populateServices();
        this.populateStations();
        console.log(Object.keys(this.captionBank).length);
    }
    /** TreeWalker filter to only accept text nodes */
    Captioner.prototype.nodeFilter = function (node) {
        // Only accept text nodes with words in them
        if (node.textContent.match(/[a-z0-9]/i))
            return NodeFilter.FILTER_ACCEPT;
        return NodeFilter.FILTER_REJECT;
    };
    Captioner.prototype.populateLetters = function () {
        // TODO: After moving letters out of I18n, fix this
        var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (var i = 0; i < letters.length; i++) {
            var letter = letters[i];
            this.captionBank["letter." + letter] = letter;
        }
    };
    Captioner.prototype.populateNumbers = function () {
        // Single digits
        for (var n = 0; n <= 60; n++)
            this.captionBank["number." + n] = n.toString();
        // 24 hour double digits
        for (var n = 1; n <= 9; n++)
            this.captionBank["number.0" + n] = "Oh-" + n;
        // 00:MM
        this.captionBank["number.00"] = 'Oh-oh';
        // 00:00
        this.captionBank["number.0000"] = 'Oh-zero hundred';
        // "Hundred"
        this.captionBank['number.hundred'] = 'Hundred';
    };
    Captioner.prototype.populateExcuses = function () {
        for (var i = 0; i < voxEditor_1.VoxEditor.database.excuses.length; i++)
            this.captionBank["excuse." + i] = voxEditor_1.VoxEditor.database.excuses[i];
    };
    /** Walks through every XML element and populates the caption bank from phrasesets */
    Captioner.prototype.populatePhrasesets = function () {
        var treeWalker = document.createTreeWalker(voxEditor_1.VoxEditor.database.phrasesets, NodeFilter.SHOW_TEXT, { acceptNode: this.nodeFilter }, false);
        var lastId = '';
        var lastIdx = 0;
        while (treeWalker.nextNode()) {
            var current = treeWalker.currentNode;
            var parent_1 = current.parentElement;
            var psIndex = -1;
            var id = '';
            var value = Strings.clean(current.textContent);
            // If text is part of a phraseset, get index of the phrase within the set
            if (!parent_1.hasAttribute('id')) {
                var phraseSet = parent_1.parentElement;
                // https://stackoverflow.com/a/9132575/3354920
                psIndex = Array.prototype.indexOf.call(phraseSet.children, parent_1);
                parent_1 = phraseSet;
            }
            // Calculate ID by getting relative indicies of phrases and text parts
            id = 'phrase.' + parent_1.id;
            // Append phrase index if we're in a phraseset
            if (psIndex !== -1)
                id += "." + psIndex;
            // Append the text part's index inside the phrase
            if (lastId !== id) {
                lastIdx = 0;
                lastId = id;
            }
            id += "." + lastIdx++;
            // Append a "preview" of the next sibling to the text
            if (current.nextSibling) {
                var next = current.nextSibling;
                var tag = next.nodeName.toUpperCase();
                // Append extra reference data to tag
                if (next.id)
                    tag += ':' + next.id;
                else if (next.hasAttribute('context'))
                    tag += ':' + next.getAttribute('context');
                else if (next.hasAttribute('ref'))
                    tag += ':' + next.getAttribute('ref');
                value += " <" + tag + ">";
            }
            this.captionBank[id] = value;
        }
    };
    Captioner.prototype.populateNames = function () {
        for (var i = 0; i < voxEditor_1.VoxEditor.database.named.length; i++)
            this.captionBank["named." + i] = voxEditor_1.VoxEditor.database.named[i];
    };
    Captioner.prototype.populateServices = function () {
        for (var i = 0; i < voxEditor_1.VoxEditor.database.services.length; i++)
            this.captionBank["services." + i] = voxEditor_1.VoxEditor.database.services[i];
    };
    Captioner.prototype.populateStations = function () {
        var _this = this;
        // Filter out parenthesized location context
        var filter = function (v) { return v.replace(/\(.+\)/i, '').trim(); };
        var stations = voxEditor_1.VoxEditor.database.stations;
        var keys = Object.keys(stations);
        keys.forEach(function (k) {
            return _this.captionBank["stations.middle." + k] = filter(stations[k]);
        });
        keys.forEach(function (k) {
            return _this.captionBank["stations.end." + k] = filter(stations[k]);
        });
    };
    return Captioner;
}());
exports.Captioner = Captioner;
//# sourceMappingURL=data:application/json;base64,